<#@ template language="VB" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
Imports Microsoft.EntityFrameworkCore
Imports CDENet.Common

Public Class <#= _name #>DataManager
	Inherits Models.<#= _name #>DataContext

		Public Sub New(ConnectionString As String, sEnv As Enumerations.SentiaEnvironmentEnum)
			MyBase.New(New DbContextOptionsBuilder(Of Models.<#= _name #>DataContext)().UseMySQL(ConnectionString, Function(opts) opts.CommandTimeout(120)).Options)
		End Sub
End Class

Namespace Models
	Partial Public Class <#= _name #>DataContext
		Inherits DbContext

		Shared Sub New()
		End Sub

		Public Sub New(ByVal options As DbContextOptions(Of <#= _name #>DataContext))
			MyBase.New(options)
		End Sub

<# For Each table In _tables #>
<# If table.escapeName Then #>
		Public Overridable Property <#= table.pluralName #> As DbSet(Of [<#= table.singleName #>])
<# Else #>
		Public Overridable Property <#= table.pluralName #> As DbSet(Of <#= table.singleName #>)
<# End If #>
<# Next #>

		' Stored procedures
<#  For Each r in _routines #>
<# If r.isFunction Then #>
		Public Property <#= r.name #> As New StoreCommands.Functions.<#= r.name #>(Me)
<# Else #>
		Public Property <#= r.name #> As New StoreCommands.Procedures.<#= r.name #>(Me)
<# End If #>
<# Next #>

		Protected Overrides Sub OnConfiguring(ByVal optionsBuilder As DbContextOptionsBuilder)
#If DEBUG Then
			optionsBuilder.LogTo(Sub(e) Debug.WriteLine(e), Microsoft.Extensions.Logging.LogLevel.Trace)
#End If
		End Sub

		Protected Overrides Sub OnModelCreating(modelBuilder As ModelBuilder)
			' Tablemappings
<# For Each table In _tables #>
			modelBuilder.ApplyConfiguration(New <#= table.singleName #>Map())
<# Next #>

			' Models for stored functions
<# Dim functionGroup = From d In _routines.where(function(c) c.isFunction)
				  Group d By dName = d.returnLayout.name 
				  Into dGroup = Group
				  Select dGroup

	For Each grp In functionGroup
#>
			modelBuilder.Entity(Of <#= grp.First.returnLayout.singleName #>).HasNoKey()
<# Next #>

			' Models for Stored Procedures that return a recordset
<# For Each proc In _routines.where(function(c) not c.isFunction and c.returnsRecordset) #>
			modelBuilder.Entity(Of <#= proc.returnLayout.singleName #>).HasNoKey()
<# Next #>
			
			' Views have no key
<# For Each view In _tables.where(function(c) c.isView) #>
			modelBuilder.Entity(Of <#= view.singleName #>).ToView(NameOf(<#= view.pluralName #>)).HasNoKey()
<# Next #>
			OnModelCreatingPartial(modelBuilder)
		End Sub

		Partial Private Sub OnModelCreatingPartial(ByVal modelBuilder As ModelBuilder)
		End Sub

		Sub Detach(ByVal entity As Object)
			Me.Entry(entity).State = EntityState.Detached
		End Sub
	End Class
End Namespace
