<#@ template language="VB" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
Imports System.Data.Entity
Imports System.Data.Entity.Infrastructure

<# if _routine.isFunction then #>
Namespace Models.StoreCommands.Functions
<# Else #>
Namespace Models.StoreCommands.Procedures
<# End If #>
    Public Class <#= _routine.name #>
<#
    Dim p1 As New List(Of String)
    Dim p2 As New List(Of String)
    Dim p3 As New List(Of String)
    Dim i As Integer = 0

    For Each p In _routine.params
        p1.add(String.Format("{0} As {1}", p.name, p.vbType))
        p2.Add("{" & i & "}")
        p3.Add(String.Format(p.name))
        i += 1
    Next

    If p1.count() > 0 Then
        If _routine.isFunction then

#>
        Public Overridable Function Execute(<#= String.Join(", ", p1) #><#= If(_withLock, ", sharedLock As Object", "") #>) As <#= _routine.returnParam.vbType #>
<# If _withLock Then #>
            SyncLock sharedLock
<# End If #>            
            <#= If(_withLock, " ","") #>Return DirectCast(_context, IObjectContextAdapter).ObjectContext.ExecuteStoreQuery(Of <#= _routine.returnParam.vbType #>)("SELECT <#= _routine.name #>(<#= String.Join(",", p2) #>)", <#= String.Join(",", p3) #>).FirstOrDefault
<# If _withLock Then #>
            End SyncLock
<# End If #>
        End Function
<#
        Else
            If _routine.returnsRecordset AndAlso _routine.returnLayout.columns IsNot Nothing AndAlso _routine.returnLayout.columns.Any() then
#>
        Public Overridable Function Execute(<#= String.Join(", ", p1) #><#= If(_withLock, ", sharedLock As Object", "") #>) As Core.Objects.ObjectResult(Of Models.StoreCommandSchemas.<#= _routine.returnLayout.singleName #>)
<# If _withLock Then #>
            SyncLock sharedLock
<# End If #>            
            <#= If(_withLock, " ","") #>Return DirectCast(_context, IObjectContextAdapter).ObjectContext.ExecuteStoreQuery(Of Models.StoreCommandSchemas.<#= _routine.returnLayout.singleName #>)("<#= _routine.name #>(<#= String.Join(",", p2) #>)", <#= String.Join(",", p3) #>)
<# If _withLock Then #>
            End SyncLock
<# End If #>
        End Function
<#
            Else
#>
        Public Overridable Sub Execute(<#= String.Join(", ", p1) #><#= If(_withLock, ", sharedLock As Object", "") #>)
<# If _withLock Then #>
            SyncLock sharedLock
<# End If #>            
            <#= If(_withLock, " ","") #>DirectCast(_context, IObjectContextAdapter).ObjectContext.ExecuteStoreCommand("<#= _routine.name #>(<#= String.Join(",", p2) #>)", <#= String.Join(",", p3) #>)
<# If _withLock Then #>
            End SyncLock
<# End If #>
        End Sub
<#          
            End If

        End if
    Else
        If _routine.isFunction then
#>
        Public Overridable Function Execute(<#= If(_withLock, "sharedLock As Object", "") #>) As <#= _routine.returnParam.vbType #>
<# If _withLock Then #>
            SyncLock sharedLock
<# End If #>            
            <#= If(_withLock, " ","") #>Return DirectCast(_context, IObjectContextAdapter).ObjectContext.ExecuteStoreQuery(Of <#= _routine.returnParam.vbType #>)("SELECT <#= _routine.name #>()").FirstOrDefault
<# If _withLock Then #>
            End SyncLock
<# End If #>
        End Function
<#      Else
            If _routine.returnsRecordset AndAlso _routine.returnLayout.columns IsNot Nothing AndAlso _routine.returnLayout.columns.Any() then
#>
        Public Overridable Function Execute(<#= If(_withLock, "sharedLock As Object", "") #>) As Core.Objects.ObjectResult(Of Models.StoreCommandSchemas.<#= _routine.returnLayout.singleName #>)
<# If _withLock Then #>
            SyncLock sharedLock
<# End If #>            
            <#= If(_withLock, " ","") #>Return DirectCast(_context, IObjectContextAdapter).ObjectContext.ExecuteStoreQuery(Of Models.StoreCommandSchemas.<#= _routine.returnLayout.singleName #>)("<#= _routine.name #>()")
<# If _withLock Then #>
            End SyncLock
<# End If #>
        End Function
<#
            Else
#>
        Public Overridable sub Execute(<#= If(_withLock, "sharedLock As Object", "") #>)
<# If _withLock Then #>
            SyncLock sharedLock
<# End If #>            
            <#= If(_withLock, " ","") #>DirectCast(_context, IObjectContextAdapter).ObjectContext.ExecuteStoreCommand("<#= _routine.name #>()")
<# If _withLock Then #>
            End SyncLock
<# End If #>
        End Sub
<#
            End If

        End If
    End If
#>
    End Class
End NameSpace