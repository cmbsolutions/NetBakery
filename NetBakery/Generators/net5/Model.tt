<#@ template language="VB" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Netbakery.infoSchema" #>
Imports System.Collections.Generic

Namespace Models
    Partial Public Class <#= _t.singleName #>
<#  If _t.foreignKeys.Any() Then #>
        Public Sub New()
<#      For Each fk in  _t.foreignKeys #>
            <#= fk.propertyAlias #> = New HashSet(Of <#= p.Singularize(fk.referencedTable.name) #>)()
<#      Next #>
        End Sub
<#  End If #>

<#  For each c in _t.columns #>
<#      If c.isNullable And c.vbType <> GetType(System.String) Then #>
        Public Property <#= c.alias #>() as <#= c.vbType #>?
<#      else #>
        Public Property <#= c.alias #>() as <#= c.vbType #>
<#      end if
    Next

    ' TODO: split into 1:N 1:1 N:1 N:N
    For Each fk in  _t.foreignKeys
 #>
        Public Overridable Property <#= fk.propertyAlias #>() As <#= p.Singularize(fk.referencedtable.name) #>
<#  Next

    For each r in _t.relations
#>
        Public Overridable Property <#= p.Pluralize(r.toTable.Name) #>() As ICollection(Of <#= p.Singularize(r.toTable.Name) #>)
<#  Next #>
    End Class
End Namespace