<#@ template language="VB" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Netbakery.Models" #>
Imports Microsoft.EntityFrameworkCore
Imports Microsoft.EntityFrameworkCore.Metadata.Builders

Namespace Models
<#
	Dim keys as New List(Of String)

	For Each c in _t.columns
		If not _t.isView Then
			If c.key = "PRI" then
				keys.add(c.alias)
			End If
		Else
			If c.name.EndsWith("_id") Then
				keys.add(c.alias)
			End If
		End If
	Next

	If _t.isView And Not keys.Any() Then
		For Each c in _t.columns
			keys.add(c.alias)
		Next
	End If
#>
	Public Partial Class <#= _t.singleName #>Map
		Implements IEntityTypeConfiguration(Of <#= _t.singleName #>)

		Public Sub Configure(builder As EntityTypeBuilder(Of <#= _t.singleName #>)) Implements IEntityTypeConfiguration(Of <#= _t.singleName #>).Configure
			' Table in database
			builder.ToTable("<#=_t.Name #>")

			' Indexes
<#
	For Each i In _t.indexes
		Dim columnnames As new StringBuilder

		If i.columns.Count > 1 Then
			for each c In i.columns
				columnnames.Append("e." & c.Column.alias & ",")
			next
			columnnames.Remove(columnnames.Length -1, 1)
#>
			builder.HasIndex(Function(e) New With {<#= columnnames.ToString #>}, "<#= i.Name #>")<#= If(i.IsUnique, ".IsUnique()", "") #>
<#
		Else
#>
			builder.HasIndex(Function(e) e.<#= i.columns.first.column.alias #>}, "<#= i.Name #>")<#= If(i.IsUnique, ".IsUnique()", "") #>
<#
		End If
	Next
#>
			' Fields
<#
	For Each c in _t.columns
		Dim configLines as new list(of String)

		configLines.Add(String.Format(".HasColumnName(""{0}"")", c.name))
		If c.vbType <> GetType(String) Then
			configLines.Add(String.Format(".HasColumnType(""{0}"")", c.MySqlColumnType))
		End If

		If not c.isNullable and not c.autoincrement then
			configLines.add(".IsRequired()")
		Else
			if Not c.autoincrement then configLines.Add(String.Format(".HasDefaultValueSql(""'{0}'"")", c.defaultValue))
		End If
		if c.vbType = GetType(System.String) AndAlso c.maximumLength > 0 AndAlso c.maximumLength <= 65535 then configLines.add(String.Format(".HasMaxLength({0})", c.maximumLength))
		if c.autoincrement then configLines.add(".ValueGeneratedOnAdd()")

		if configLines.count() > 0 then
#>
			builder.[Property](Function(e) e.<#= c.alias #>)<#= String.Join("", configLines) #>
<#
		end if
	Next
#>
			' ForeignKeys
<#
	For Each f In _t.foreignKeys
		dim lineParts As New List(of String)

		lineParts.Add("builder.HasOne(Function(d) d.")
		lineparts.Add(f.referencedTable.singleName)
		lineParts.Add(").WithMany(Function(p) p.")
		lineParts.Add(f.table.singleName)
		lineParts.Add(f.referencedTable.pluralName)
		lineParts.Add(").HasForeignKey(Function(d) d.")
		lineParts.Add(f.column.name)
		lineParts.Add(").HasConstraintName(""")
		lineParts.Add(f.name)
		lineParts.Add(""")")
#>
			<#= String.Join("", lineParts) #>
<#
	Next
#>
		End Sub
	End Class
End Namespace