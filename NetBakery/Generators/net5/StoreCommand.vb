Imports System.Linq
Imports System.Text
Imports System.Collections.Generic
Imports System

'------------------------------------------------------------------------------
'<auto-generated>
'    This code was generated by a tool.
'    Runtime Version: 17.0.0.0
' 
'    Changes to this file may cause incorrect behavior and will be lost if
'    the code is regenerated.
'</auto-generated>
'------------------------------------------------------------------------------
Namespace My.Templates.net5
    '''<summary>
    '''Class to produce the template output
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")>  _
    Partial Public Class StoreCommand
        Inherits StoreCommandBase
        '''<summary>
        '''Create the template output
        '''</summary>
        Public Overridable Function TransformText() As String
            Me.Write("Imports Microsoft.EntityFrameworkCore"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",8)
 if _routine.isFunction then 
            
            #End ExternalSource
            Me.Write("Namespace Models.StoreCommands.Functions"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",10)
 Else 
            
            #End ExternalSource
            Me.Write("Namespace Models.StoreCommands.Procedures"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",12)
 End If 
            
            #End ExternalSource
            Me.Write("    Public Class ")
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",13)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(_routine.name))
            
            #End ExternalSource
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        Inherits StoreCommandsBase"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        Public Sub New(ctx As DbContext)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            MyBase.New(ctx)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        End Sub"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",19)

    Dim p1 As New List(Of String)
    Dim p2 As New List(Of String)
    Dim p3 As New List(Of String)
    Dim i As Integer = 0

    For Each p In _routine.params
        p1.add(String.Format("{0} As {1}", p.name, p.vbType))
        p2.Add("{" & i & "}")
        p3.Add(String.Format(p.name))
        i += 1
    Next

    If p1.count() > 0 Then
        If _routine.isFunction then
            If _routine.returnLayout.columns.first.isNullable and _routine.returnLayout.columns.first.vbtype <> "String" Then

            
            #End ExternalSource
            Me.Write("        Public Overridable Function Execute(")
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",36)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(String.Join(", ", p1)))
            
            #End ExternalSource
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",36)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(If(_withLock, ", sharedLock As Object", "")))
            
            #End ExternalSource
            Me.Write(") As ")
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",36)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(_routine.returnLayout.columns.first.vbtype))
            
            #End ExternalSource
            Me.Write("?"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",37)
          Else 
            
            #End ExternalSource
            Me.Write("        Public Overridable Function Execute(")
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",38)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(String.Join(", ", p1)))
            
            #End ExternalSource
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",38)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(If(_withLock, ", sharedLock As Object", "")))
            
            #End ExternalSource
            Me.Write(") As ")
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",38)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(_routine.returnLayout.columns.first.vbtype))
            
            #End ExternalSource
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",39)
          End If
    If _withLock Then 
            
            #End ExternalSource
            Me.Write("            SyncLock sharedLock"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                Dim result = context.Set(Of Mode"& _ 
                    "ls.")
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",42)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(_routine.returnParam.vbType))
            
            #End ExternalSource
            Me.Write("Model).FromSqlRaw(""SELECT ")
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",42)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(_routine.name))
            
            #End ExternalSource
            Me.Write("(")
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",42)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(String.Join(",", p2)))
            
            #End ExternalSource
            Me.Write(")"", ")
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",42)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(String.Join(",", p3)))
            
            #End ExternalSource
            Me.Write(").FirstOrDefault"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                If result IsNot Nothing Then"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                 "& _ 
                    "   Return result.value"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                Else"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                    Return Nothing"& _ 
                    ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                End If"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            End SyncLock"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",49)
 Else 
            
            #End ExternalSource
            Me.Write("            Dim result = context.Set(Of Models.")
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",50)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(_routine.returnParam.vbType))
            
            #End ExternalSource
            Me.Write("Model).FromSqlRaw(""SELECT ")
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",50)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(_routine.name))
            
            #End ExternalSource
            Me.Write("(")
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",50)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(String.Join(",", p2)))
            
            #End ExternalSource
            Me.Write(")"", ")
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",50)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(String.Join(",", p3)))
            
            #End ExternalSource
            Me.Write(").FirstOrDefault"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            If result IsNot Nothing Then"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                Retur"& _ 
                    "n result.value"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            Else"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                Return Nothing"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            En"& _ 
                    "d If"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",56)
 End If 
            
            #End ExternalSource
            Me.Write("        End Function"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",58)

        Else
            If _routine.returnsRecordset AndAlso _routine.returnLayout.columns IsNot Nothing AndAlso _routine.returnLayout.columns.Any() then

            
            #End ExternalSource
            Me.Write("        Public Overridable Function Execute(")
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",62)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(String.Join(", ", p1)))
            
            #End ExternalSource
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",62)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(If(_withLock, ", sharedLock As Object", "")))
            
            #End ExternalSource
            Me.Write(") As List(Of Models.")
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",62)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(_routine.returnLayout.singleName))
            
            #End ExternalSource
            Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",63)
 If _withLock Then 
            
            #End ExternalSource
            Me.Write("            SyncLock sharedLock"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                Dim result = context.Set(Of Mode"& _ 
                    "ls.")
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",65)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(_routine.returnLayout.singleName))
            
            #End ExternalSource
            Me.Write(").FromSqlRaw(""CALL ")
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",65)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(_routine.name))
            
            #End ExternalSource
            Me.Write("(")
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",65)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(String.Join(",", p2)))
            
            #End ExternalSource
            Me.Write(")"", ")
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",65)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(String.Join(",", p3)))
            
            #End ExternalSource
            Me.Write(").ToList"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                If result IsNot Nothing Then"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                    Retur"& _ 
                    "n result"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                Else"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                    Return Nothing"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            "& _ 
                    "    End If"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            End SyncLock"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",72)
 Else 
            
            #End ExternalSource
            Me.Write("            Dim result = context.Set(Of Models.")
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",73)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(_routine.returnLayout.singleName))
            
            #End ExternalSource
            Me.Write(").FromSqlRaw(""CALL ")
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",73)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(_routine.name))
            
            #End ExternalSource
            Me.Write("(")
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",73)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(String.Join(",", p2)))
            
            #End ExternalSource
            Me.Write(")"", ")
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",73)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(String.Join(",", p3)))
            
            #End ExternalSource
            Me.Write(").ToList"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            If result IsNot Nothing Then"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                Return result"& _ 
                    ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            Else"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                Return Nothing"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            End If"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",79)
 End If 
            
            #End ExternalSource
            Me.Write("        End Function"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",81)

            Else

            
            #End ExternalSource
            Me.Write("        Public Overridable Sub Execute(")
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",84)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(String.Join(", ", p1)))
            
            #End ExternalSource
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",84)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(If(_withLock, ", sharedLock As Object", "")))
            
            #End ExternalSource
            Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",85)
 If _withLock Then 
            
            #End ExternalSource
            Me.Write("            SyncLock sharedLock"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                context.Database.ExecuteSqlRaw("""& _ 
                    "CALL ")
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",87)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(_routine.name))
            
            #End ExternalSource
            Me.Write("(")
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",87)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(String.Join(",", p2)))
            
            #End ExternalSource
            Me.Write(")"", ")
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",87)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(String.Join(",", p3)))
            
            #End ExternalSource
            Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            End SyncLock"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",89)
 Else 
            
            #End ExternalSource
            Me.Write("            context.Database.ExecuteSqlRaw(""CALL ")
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",90)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(_routine.name))
            
            #End ExternalSource
            Me.Write("(")
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",90)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(String.Join(",", p2)))
            
            #End ExternalSource
            Me.Write(")"", ")
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",90)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(String.Join(",", p3)))
            
            #End ExternalSource
            Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",91)
 End If 
            
            #End ExternalSource
            Me.Write("        End Sub"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",93)
          
            End If

        End if
    Else
        If _routine.isFunction then
            If _routine.returnLayout.columns.first.isNullable and _routine.returnLayout.columns.first.vbtype <> "String" Then

            
            #End ExternalSource
            Me.Write("        Public Overridable Function Execute(")
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",101)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(If(_withLock, "sharedLock As Object", "")))
            
            #End ExternalSource
            Me.Write(") As ")
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",101)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(_routine.returnLayout.columns.first.vbtype))
            
            #End ExternalSource
            Me.Write("?"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",102)
          Else 
            
            #End ExternalSource
            Me.Write("        Public Overridable Function Execute(")
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",103)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(If(_withLock, "sharedLock As Object", "")))
            
            #End ExternalSource
            Me.Write(") As ")
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",103)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(_routine.returnLayout.columns.first.vbtype))
            
            #End ExternalSource
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",104)
          End If
   If _withLock Then 
            
            #End ExternalSource
            Me.Write("            SyncLock sharedLock"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                Dim result = context.Set(Of Mode"& _ 
                    "ls.")
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",107)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(_routine.returnParam.vbType))
            
            #End ExternalSource
            Me.Write("Model).FromSqlRaw(""SELECT ")
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",107)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(_routine.name))
            
            #End ExternalSource
            Me.Write("()"").FirstOrDefault"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                If result IsNot Nothing Then"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"              "& _ 
                    "      Return result.value"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                Else"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                    Return Noth"& _ 
                    "ing"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                End If"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            End SyncLock"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",114)
 Else 
            
            #End ExternalSource
            Me.Write("            Dim result = context.Set(Of Models.")
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",115)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(_routine.returnParam.vbType))
            
            #End ExternalSource
            Me.Write("Model).FromSqlRaw(""SELECT ")
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",115)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(_routine.name))
            
            #End ExternalSource
            Me.Write("()"").FirstOrDefault"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            If result IsNot Nothing Then"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                Re"& _ 
                    "turn result.value"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            Else"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                Return Nothing"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"           "& _ 
                    " End If"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",121)
 End If 
            
            #End ExternalSource
            Me.Write("        End Function"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",123)
      Else
            If _routine.returnsRecordset AndAlso _routine.returnLayout.columns IsNot Nothing AndAlso _routine.returnLayout.columns.Any() then

            
            #End ExternalSource
            Me.Write("        Public Overridable Function Execute(")
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",126)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(If(_withLock, "sharedLock As Object", "")))
            
            #End ExternalSource
            Me.Write(") As List(Of Models.")
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",126)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(_routine.returnLayout.singleName))
            
            #End ExternalSource
            Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",127)
 If _withLock Then 
            
            #End ExternalSource
            Me.Write("            SyncLock sharedLock"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                Dim result = context.Set(Of Mode"& _ 
                    "ls.")
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",129)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(_routine.returnLayout.singleName))
            
            #End ExternalSource
            Me.Write(").FromSqlRaw(""CALL ")
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",129)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(_routine.name))
            
            #End ExternalSource
            Me.Write("()"").ToList"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                If result IsNot Nothing Then"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                    Re"& _ 
                    "turn result"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                Else"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                    Return Nothing"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"         "& _ 
                    "       End If"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            End SyncLock"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",136)
 Else 
            
            #End ExternalSource
            Me.Write("            Dim result = context.Set(Of Models.")
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",137)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(_routine.returnLayout.singleName))
            
            #End ExternalSource
            Me.Write(").FromSqlRaw(""CALL ")
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",137)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(_routine.name))
            
            #End ExternalSource
            Me.Write("()"").ToList"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            If result IsNot Nothing Then"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                Return res"& _ 
                    "ult"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            Else"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                Return Nothing"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            End If"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",143)
 End If 
            
            #End ExternalSource
            Me.Write("        End Function"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",145)

            Else

            
            #End ExternalSource
            Me.Write("        Public Overridable Sub Execute(")
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",148)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(If(_withLock, "sharedLock As Object", "")))
            
            #End ExternalSource
            Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",149)
 If _withLock Then 
            
            #End ExternalSource
            Me.Write("            SyncLock sharedLock"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                context.Database.ExecuteSqlRaw("""& _ 
                    "CALL ")
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",151)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(_routine.name))
            
            #End ExternalSource
            Me.Write("()"")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            End SyncLock"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",153)
 Else 
            
            #End ExternalSource
            Me.Write("            context.Database.ExecuteSqlRaw(""CALL ")
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",154)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(_routine.name))
            
            #End ExternalSource
            Me.Write("()"")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",155)
 End If 
            
            #End ExternalSource
            Me.Write("        End Sub"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            
            #ExternalSource("D:\LocalRepos\dnt\NetBakery\NetBakery\Generators\net5\StoreCommand.tt",157)

            End If

        End If
    End If

            
            #End ExternalSource
            Me.Write("    End Class"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"End NameSpace")
            Return Me.GenerationEnvironment.ToString
        End Function
    End Class
    #Region "Base class"
    '''<summary>
    '''Base class for this transformation
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")>  _
    Public Class StoreCommandBase
        #Region "Fields"
        Private generationEnvironmentField As Global.System.Text.StringBuilder
        Private errorsField As Global.System.CodeDom.Compiler.CompilerErrorCollection
        Private indentLengthsField As Global.System.Collections.Generic.List(Of Integer)
        Private currentIndentField As String = ""
        Private endsWithNewline As Boolean
        Private sessionField As Global.System.Collections.Generic.IDictionary(Of String, Object)
        #End Region
        #Region "Properties"
        '''<summary>
        '''The string builder that generation-time code is using to assemble generated output
        '''</summary>
        Public Property GenerationEnvironment() As System.Text.StringBuilder
            Get
                If (Me.generationEnvironmentField Is Nothing) Then
                    Me.generationEnvironmentField = New Global.System.Text.StringBuilder()
                End If
                Return Me.generationEnvironmentField
            End Get
            Set
                Me.generationEnvironmentField = value
            End Set
        End Property
        '''<summary>
        '''The error collection for the generation process
        '''</summary>
        Public ReadOnly Property Errors() As System.CodeDom.Compiler.CompilerErrorCollection
            Get
                If (Me.errorsField Is Nothing) Then
                    Me.errorsField = New Global.System.CodeDom.Compiler.CompilerErrorCollection()
                End If
                Return Me.errorsField
            End Get
        End Property
        '''<summary>
        '''A list of the lengths of each indent that was added with PushIndent
        '''</summary>
        Private ReadOnly Property indentLengths() As System.Collections.Generic.List(Of Integer)
            Get
                If (Me.indentLengthsField Is Nothing) Then
                    Me.indentLengthsField = New Global.System.Collections.Generic.List(Of Integer)()
                End If
                Return Me.indentLengthsField
            End Get
        End Property
        '''<summary>
        '''Gets the current indent we use when adding lines to the output
        '''</summary>
        Public ReadOnly Property CurrentIndent() As String
            Get
                Return Me.currentIndentField
            End Get
        End Property
        '''<summary>
        '''Current transformation session
        '''</summary>
        Public Overridable Property Session() As Global.System.Collections.Generic.IDictionary(Of String, Object)
            Get
                Return Me.sessionField
            End Get
            Set
                Me.sessionField = value
            End Set
        End Property
        #End Region
        #Region "Transform-time helpers"
        '''<summary>
        '''Write text directly into the generated output
        '''</summary>
        Public Overloads Sub Write(ByVal textToAppend As String)
            If String.IsNullOrEmpty(textToAppend) Then
                Return
            End If
            'If we're starting off, or if the previous text ended with a newline,
            'we have to append the current indent first.
            If ((Me.GenerationEnvironment.Length = 0)  _
                        OrElse Me.endsWithNewline) Then
                Me.GenerationEnvironment.Append(Me.currentIndentField)
                Me.endsWithNewline = false
            End If
            'Check if the current text ends with a newline
            If textToAppend.EndsWith(Global.System.Environment.NewLine, Global.System.StringComparison.CurrentCulture) Then
                Me.endsWithNewline = true
            End If
            'This is an optimization. If the current indent is "", then we don't have to do any
            'of the more complex stuff further down.
            If (Me.currentIndentField.Length = 0) Then
                Me.GenerationEnvironment.Append(textToAppend)
                Return
            End If
            'Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(Global.System.Environment.NewLine, (Global.System.Environment.NewLine + Me.currentIndentField))
            'If the text ends with a newline, then we should strip off the indent added at the very end
            'because the appropriate indent will be added when the next time Write() is called
            If Me.endsWithNewline Then
                Me.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - Me.currentIndentField.Length))
            Else
                Me.GenerationEnvironment.Append(textToAppend)
            End If
        End Sub
        '''<summary>
        '''Write text directly into the generated output
        '''</summary>
        Public Overloads Sub WriteLine(ByVal textToAppend As String)
            Me.Write(textToAppend)
            Me.GenerationEnvironment.AppendLine
            Me.endsWithNewline = true
        End Sub
        '''<summary>
        '''Write formatted text directly into the generated output
        '''</summary>
        Public Overloads Sub Write(ByVal format As String, <System.ParamArrayAttribute()> ByVal args() As Object)
            Me.Write(String.Format(Global.System.Globalization.CultureInfo.CurrentCulture, format, args))
        End Sub
        '''<summary>
        '''Write formatted text directly into the generated output
        '''</summary>
        Public Overloads Sub WriteLine(ByVal format As String, <System.ParamArrayAttribute()> ByVal args() As Object)
            Me.WriteLine(String.Format(Global.System.Globalization.CultureInfo.CurrentCulture, format, args))
        End Sub
        '''<summary>
        '''Raise an error
        '''</summary>
        Public Sub [Error](ByVal message As String)
            Dim [error] As System.CodeDom.Compiler.CompilerError = New Global.System.CodeDom.Compiler.CompilerError()
            [error].ErrorText = message
            Me.Errors.Add([error])
        End Sub
        '''<summary>
        '''Raise a warning
        '''</summary>
        Public Sub Warning(ByVal message As String)
            Dim [error] As System.CodeDom.Compiler.CompilerError = New Global.System.CodeDom.Compiler.CompilerError()
            [error].ErrorText = message
            [error].IsWarning = true
            Me.Errors.Add([error])
        End Sub
        '''<summary>
        '''Increase the indent
        '''</summary>
        Public Sub PushIndent(ByVal indent As String)
            If (indent = Nothing) Then
                Throw New Global.System.ArgumentNullException("indent")
            End If
            Me.currentIndentField = (Me.currentIndentField + indent)
            Me.indentLengths.Add(indent.Length)
        End Sub
        '''<summary>
        '''Remove the last indent that was added with PushIndent
        '''</summary>
        Public Function PopIndent() As String
            Dim returnValue As String = ""
            If (Me.indentLengths.Count > 0) Then
                Dim indentLength As Integer = Me.indentLengths((Me.indentLengths.Count - 1))
                Me.indentLengths.RemoveAt((Me.indentLengths.Count - 1))
                If (indentLength > 0) Then
                    returnValue = Me.currentIndentField.Substring((Me.currentIndentField.Length - indentLength))
                    Me.currentIndentField = Me.currentIndentField.Remove((Me.currentIndentField.Length - indentLength))
                End If
            End If
            Return returnValue
        End Function
        '''<summary>
        '''Remove any indentation
        '''</summary>
        Public Sub ClearIndent()
            Me.indentLengths.Clear
            Me.currentIndentField = ""
        End Sub
        #End Region
        #Region "ToString Helpers"
        '''<summary>
        '''Utility class to produce culture-oriented representation of an object as a string.
        '''</summary>
        Public Class ToStringInstanceHelper
            Private formatProviderField  As System.IFormatProvider = Global.System.Globalization.CultureInfo.InvariantCulture
            '''<summary>
            '''Gets or sets format provider to be used by ToStringWithCulture method.
            '''</summary>
            Public Property FormatProvider() As System.IFormatProvider
                Get
                    Return Me.formatProviderField 
                End Get
                Set
                    If (Not (value) Is Nothing) Then
                        Me.formatProviderField  = value
                    End If
                End Set
            End Property
            '''<summary>
            '''This is called from the compile/run appdomain to convert objects within an expression block to a string
            '''</summary>
            Public Function ToStringWithCulture(ByVal objectToConvert As Object) As String
                If (objectToConvert Is Nothing) Then
                    Throw New Global.System.ArgumentNullException("objectToConvert")
                End If
                Dim t As System.Type = objectToConvert.GetType
                Dim method As System.Reflection.MethodInfo = t.GetMethod("ToString", New System.Type() {GetType(System.IFormatProvider)})
                If (method Is Nothing) Then
                    Return objectToConvert.ToString
                Else
                    Return CType(method.Invoke(objectToConvert, New Object() {Me.formatProviderField }),String)
                End If
            End Function
        End Class
        Private toStringHelperField As ToStringInstanceHelper = New ToStringInstanceHelper()
        '''<summary>
        '''Helper to produce culture-oriented representation of an object as a string
        '''</summary>
        Public ReadOnly Property ToStringHelper() As ToStringInstanceHelper
            Get
                Return Me.toStringHelperField
            End Get
        End Property
        #End Region
    End Class
    #End Region
End Namespace
