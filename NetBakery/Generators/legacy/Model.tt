<#@ template language="VB" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Netbakery.infoSchema" #>

Namespace Models<#= If(_IsStoreCommand, ".StoreCommandSchemas", "") #>
<# If _t.escapeName then #>
    Partial Public Class [<#= _t.singleName #>]
<# Else #>
    Partial Public Class <#= _t.singleName #>
<# End If #>
<# If _t.relations.Any() Then #>
        Public Sub New()
<#      For Each re in _t.relations.Where(function(c) c.toTable.HasExport).OrderBy(Function(c) c.toTable.name) #>
<#          If re.toTable.escapeName Then #>
            <#= re.alias #> = New List(Of [<#= re.toTable.singleName #>])
<#          Else #>
            <#= re.alias #> = New List(Of <#= re.toTable.singleName #>)
<#          End If #>
<#      Next #>
        End Sub
<#  End If #>

<#  For each c in _t.columns #>
<#      If c.isNullable And c.vbType <> "String" Then #>
        Property <#= c.alias #>() as <#= c.vbType #>?
<#      else #>
        Property <#= c.alias #>() as <#= c.vbType #>
<#      end if

        If c.mysqlType = "enum" AndAlso c.vbType <> "String" Then
            _i = 1
 #>

        Enum <#= c.vbType #>
<#          For Each e in c.enums #>
            <#= e #> = <#= _i #>
<#              _i += 1 #>
<#          Next #>
        End Enum

<#      End If
    Next

    For each fk in _t.foreignkeys.where(function(c) c.referencedtable.hasExport).orderby(Function(c) c.propertyalias)
#>
<# If fk.referencedtable.escapeName then #>
        Public Property <#= fk.propertyAlias #>() as [<#= fk.referencedtable.singlename #>]
<# Else #>
        Public Property <#= fk.propertyAlias #>() as <#= fk.referencedtable.singlename #>
<# End If #>
<#  Next 

    For Each re in  _t.relations.Where(function(c) c.toTable.HasExport).orderby(Function(c) c.totable.name)
#>
<# If re.totable.escapeName then #>
        Public Overridable Property <#= re.alias #>() As List(Of [<#= re.totable.SingleName #>])
<# Else #>
        Public Overridable Property <#= re.alias #>() As List(Of <#= re.totable.SingleName #>)
<# End If #>
<#  Next
#>
    End Class
End Namespace