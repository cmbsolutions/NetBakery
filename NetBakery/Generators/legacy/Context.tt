<#@ template language="VB" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
Imports System.Data.Entity
Imports System.Data.Entity.Infrastructure
Imports <#= _name #>Data.Models.Mapping
Imports MySql.Data.Entity
Imports System.Data
Imports System.Data.Entity.Core.Objects
Imports System.Data.Common
Imports System.Reflection
Imports System.Runtime.InteropServices
Imports System.Threading
Imports System.Data.Entity.Core
Imports AutomatischeVerwerking.AVPluginInterface
Imports System.Linq.Expressions
Imports System.Data.Entity.Core.Metadata.Edm

Public Class <#= _name #>DataManager
	Inherits Models.<#= _name #>DataContext

	Private _callerAssemblyGUID As String
	Private _callerAssemblyName As String
	Public StoreCommands As New Models.StoreCommands(Me)

	Public Sub New(ConnectionString As String, Optional ByVal sEnv As eSentiaEnv = eSentiaEnv.tst)
		MyBase.New(New MySqlConnectionFactory().CreateConnection(ConnectionString))

		' Proxie creation uitzetten
		Me.Configuration.ProxyCreationEnabled = False

		_callerAssemblyGUID = CType(Assembly.GetCallingAssembly().GetCustomAttributes(GetType(GuidAttribute), False)(0), GuidAttribute).Value
		_callerAssemblyName = Assembly.GetCallingAssembly().GetName().Name

		' initialiseren van de database verbinding in de databasecontext
		Me.Database.Initialize(False)
	End Sub

	Public Function ConvertEntityResultSetToDataTable(EntityResultSet As Linq.IQueryable) As DataTable
		Try
			Dim table = New DataTable

			For Each EntityResult In EntityResultSet
				If table.Columns.Count = 0 Then
					For Each info As PropertyInfo In EntityResult.GetType().GetProperties()
						If info.CanRead Then
							Dim IsNullable As Boolean = (Nullable.GetUnderlyingType(info.PropertyType) IsNot Nothing)

							If IsNullable Then
								table.Columns.Add(info.Name, Nullable.GetUnderlyingType(info.PropertyType))
							Else
								table.Columns.Add(info.Name, info.PropertyType())
							End If
						End If
					Next
				End If

				Dim row As DataRow = table.NewRow

				For Each info As PropertyInfo In EntityResult.GetType().GetProperties()
					Dim IsNullable As Boolean = (Nullable.GetUnderlyingType(info.PropertyType) IsNot Nothing)

					If IsNullable Then
						Dim val As Object = info.GetValue(EntityResult, Nothing)
						If Not val Is Nothing Then row(info.Name) = Convert.ChangeType(val, Nullable.GetUnderlyingType(info.PropertyType))
					Else
						row(info.Name) = info.GetValue(EntityResult, Nothing)
					End If

				Next
				table.Rows.Add(row)
			Next

			Return table
		Catch ex As Exception
			Throw
		End Try

		Return Nothing
	End Function

	Public Sub SetFieldValueByName(_entity As Object, _fieldname As String, _value As Object)
		Try
			Dim info As PropertyInfo = _entity.GetType().GetProperties().Where(Function(c) c.Name = _fieldname).FirstOrDefault
			If Not info Is Nothing AndAlso info.CanRead AndAlso info.CanWrite Then
				info.SetValue(_entity, _value)
			End If
		Catch ex As Exception
			Throw
		End Try
	End Sub

	Public Overrides Function SaveChanges() As Integer
		For i As Integer = 0 To CInt(My.Resources.retryCount)
			Try
				Return MyBase.SaveChanges
				Exit For
			Catch ex As EntityException
				' No host connection
				If ex.HResult = -2146233087 Then
					If i < CInt(My.Resources.retryCount) Then ' Retry 
						Thread.Sleep(CInt(My.Resources.retryTimeout))
						Continue For
					End If
				End If
				'deadlock
				If ex.GetInnerExceptionText.Contains("Deadlock") Then
					If i < CInt(My.Resources.retryCount) Then ' Retry 
						Thread.Sleep(CInt(My.Resources.retryTimeout))
						Continue For
					End If
				End If

				Throw
			Catch ex As Exception
				'deadlock
				If ex.GetInnerExceptionText.Contains("Deadlock") Then
					If i < CInt(My.Resources.retryCount) Then ' Retry 
						Thread.Sleep(CInt(My.Resources.retryTimeout))
						Continue For
					End If
				End If

				Throw
			End Try
		Next

		Return 0
	End Function
End Class

Namespace Models
	Public Class <#= _name #>DataContextConfiguration
		Inherits DbConfiguration

		Public Sub New()
			SetExecutionStrategy(MySqlProviderInvariantName.ProviderName, Function() New MySqlExecutionStrategy)
		End Sub
	End Class

	'<DbConfigurationType(GetType(<#= _name #>DataContextConfiguration))>
	Partial Public Class <#= _name #>DataContext
		Inherits DbContext

		Shared Sub New()
			Database.SetInitializer(Of <#= _name #>DataContext)(Nothing)
		End Sub

		Sub New(connection As DbConnection)
			MyBase.New(connection, True)
		End Sub

<# For Each table In _tables #>
<# If table.escapeName then #>
		Property <#= table.pluralName #>() As DbSet(Of [<#= table.singleName #>])
<# Else #>
		Property <#= table.pluralName #>() As DbSet(Of <#= table.singleName #>)
<# End If #>
<# Next #>

		Protected Overrides Sub OnModelCreating(modelBuilder As DbModelBuilder)
<# For Each table In _tables #>
			modelBuilder.Configurations.Add(New <#= table.singleName #>Map())
<# Next #>
		End Sub

		Sub Detach(ByVal entity As Object)
			DirectCast(Me, IObjectContextAdapter).ObjectContext.Detach(entity)
		End Sub

		Public Function GetMaxLength(Of TEntity As Class)([property] As Expression(Of Func(Of TEntity, String))) As Integer
			Dim MaxLength As Integer

			Dim entType As Type = GetType(TEntity)
			Dim propertyName As String = DirectCast([property].Body, MemberExpression).Member.Name

			MaxLength = GetMaxLength(Of EntityType)(propertyName)

			Return MaxLength
		End Function

		Public Function GetMaxLength(Of TEntity As Class)([property] As String) As Integer
			Dim MaxLength As Integer = 0

			Dim test = DirectCast(Me, IObjectContextAdapter).ObjectContext.MetadataWorkspace.GetItems(DataSpace.CSpace)

			If test Is Nothing Then
				Return -1
			End If

			Dim entType As Type = GetType(TEntity)
			Dim propertyName As String = [property]

			Dim q = test.Where(Function(m) m.BuiltInTypeKind = BuiltInTypeKind.EntityType).SelectMany(Function(meta) DirectCast(meta, EntityType).Properties.Where(Function(p) p.Name = propertyName AndAlso p.TypeUsage.EdmType.Name = "String"))
			Dim queryResult = q.Where(Function(p) entType.Name = p.DeclaringType.Name).Select(Function(sel) sel.TypeUsage.Facets("MaxLength").Value).ToList()

			If queryResult.Any() Then
				Dim result As String = queryResult.FirstOrDefault().ToString()

				If result = "Max" Then
					MaxLength = -1
				Else
					MaxLength = Convert.ToInt32(result)
				End If
			End If

			Return MaxLength
		End Function

	End Class
End Namespace
