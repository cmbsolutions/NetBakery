<#@ template language="VB" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
Imports System.Data.Entity
Imports System.Data.Entity.Infrastructure

Namespace Models
    Public Class StoreCommands
        Private _context As <#= _name #>DataContext

        Sub New(ByRef context As <#= _name #>DataContext)
            _context = context
        End Sub
<#
    For Each f In _functions
        Dim p1 As New List(Of String)
        Dim p2 As New List(Of String)
        Dim p3 As New List(Of String)
        Dim i As Integer = 0

        For Each p In f.params
            p1.add(String.Format("{0} As {1}", p.paramName, p.vbType))
            p2.Add("{" & i & "}")
            p3.Add(String.Format(p.paramName))
            i += 1
        Next

		if _syncLock then
			p1.add("sharedLock As Object")
		end if

        If p1.Any() Then
#>
        Public Overridable Function <#= f.routineName #>(<#= String.Join(", ", p1) #>) As <#= f.returnParam.vbType #>
		<# If _syncLock Then #>
            SyncLock sharedLock
                Return DirectCast(_context, IObjectContextAdapter).ObjectContext.ExecuteStoreQuery(Of <#= f.returnParam.vbType #>)("SELECT <#= f.routineName #>(<#= String.Join(",", p2) #>)", <#= String.Join(", ", p3) #>).FirstOrDefault
            End SyncLock
		<# else #>
            Return DirectCast(_context, IObjectContextAdapter).ObjectContext.ExecuteStoreQuery(Of <#= f.returnParam.vbType #>)("SELECT <#= f.routineName #>(<#= String.Join(",", p2) #>)", <#= String.Join(", ", p3) #>).FirstOrDefault
		<# end if #>
        End Function

<#
        Else
#>
        Public Overridable Function <#= f.routineName #>() As <#= f.returnParam.vbType #>
            Return DirectCast(_context, IObjectContextAdapter).ObjectContext.ExecuteStoreQuery(Of <#= f.returnParam.vbType #>)("SELECT <#= f.routineName #>()").FirstOrDefault
        End Function

<#
        End If
    Next

    For Each f In _procedures
        Dim p1 As New List(Of String)
        Dim p2 As New List(Of String)
        Dim p3 As New List(Of String)
        Dim i As Integer = 0

        For Each p In f.params
            p1.add(String.Format("{0} As {1}", p.paramName, p.vbType))
            p2.Add("{" & i & "}")
            p3.Add(String.Format(p.paramName))
            i += 1
        Next

		if _syncLock then
			p1.add("sharedLock As Object")
		end if


        If p1.Any() Then
            If f.returnsRecordset AndAlso f.returnLayout.columns IsNot Nothing AndAlso f.returnLayout.columns.Any() then
#>
        Public Overridable Function <#= f.routineName #>(<#= String.Join(", ", p1) #>) As Core.Objects.ObjectResult(Of Models.StoreCommandSchemas.<#= f.returnLayout.singleName #>)
        <# If _syncLock Then #>
            SyncLock sharedLock
                Return DirectCast(_context, IObjectContextAdapter).ObjectContext.ExecuteStoreQuery(Of Models.StoreCommandSchemas.<#= f.returnLayout.singleName #>)("<#= f.routineName #>(<#= String.Join(",", p2) #>)", <#= String.Join(", ", p3) #>)
            End SyncLock
		<# else #>
            Return DirectCast(_context, IObjectContextAdapter).ObjectContext.ExecuteStoreQuery(Of Models.StoreCommandSchemas.<#= f.returnLayout.singleName #>)("<#= f.routineName #>(<#= String.Join(",", p2) #>)", <#= String.Join(", ", p3) #>)
		<# end if #>
        End Function
<#
            else
#>
        Public Overridable Sub <#= f.routineName #>(<#= String.Join(", ", p1) #>)
        <# If _syncLock Then #>
            SyncLock sharedLock
                DirectCast(_context, IObjectContextAdapter).ObjectContext.ExecuteStoreCommand("<#= f.routineName #>(<#= String.Join(",", p2) #>)", <#= String.Join(", ", p3) #>)
            End SyncLock
		<# else #>
            DirectCast(_context, IObjectContextAdapter).ObjectContext.ExecuteStoreCommand("<#= f.routineName #>(<#= String.Join(",", p2) #>)", <#= String.Join(", ", p3) #>)
		<# end if #>
        End Sub
<#          
            End If
        Else
            If f.returnsRecordset AndAlso f.returnLayout.columns IsNot Nothing AndAlso f.returnLayout.columns.Any() then
#>
        Public Overridable Function <#= f.routineName #>() As Core.Objects.ObjectResult(Of Models.StoreCommandSchemas.<#= f.returnLayout.singleName #>)
            Return DirectCast(_context, IObjectContextAdapter).ObjectContext.ExecuteStoreQuery(Of Models.StoreCommandSchemas.<#= f.returnLayout.singleName #>)("<#= f.routineName #>()")
        End Function
<#
            else
#>
        Public Overridable Sub <#= f.routineName #>()
            DirectCast(_context, IObjectContextAdapter).ObjectContext.ExecuteStoreCommand("<#= f.routineName #>()")
        End Sub
<#
            End If
        End If
    Next
#>

    End Class
End Namespace

