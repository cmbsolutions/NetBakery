<#@ template language="VB" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Netbakery.Models" #>
Imports System.ComponentModel.DataAnnotations.Schema
Imports System.Data.Entity.ModelConfiguration

Namespace Models.Mapping
<#
	Dim keys as New List(Of String)

	For Each c in _t.columns
		If not _t.isView Then
			If c.key = "PRI" then
				keys.add(c.alias)
			End If
		Else
			If c.name.EndsWith("_id") Then
				keys.add(c.alias)
			End If
		End If
	Next

	If _t.isView And Not keys.Any() Then
		For Each c in _t.columns
			keys.add(c.alias)
		Next
	End If
#>
	Public Class <#= _t.singleName #>Map
		Inherits EntityTypeConfiguration(Of <#= _t.singleName #>)
		Public Sub New()
			' Primary Key
<#
	If keys.Any() Then
		If keys.count() = 1 then #>
			Me.HasKey(Function(t) t.<#= String.Join("", keys) #>)
<#      else #>
			Me.HasKey(Function(t) New With { t.<#= String.Join(", t.", keys) #>})
<# 
		End If
	End If
#>

			' Properties
<#
	For Each c in _t.columns
		Dim configLines as new list(of String)

		if not c.isNullable then configLines.add(".IsRequired()")
		if c.vbType = GetType(System.String) AndAlso c.maximumLength > 0 then configLines.add(String.format(".HasMaxLength({0})", c.maximumLength))

		if configLines.Any() then
#>
			Me.[Property](Function(t) t.<#= c.alias #>)<#= String.Join("", configLines) #>
<#
		end if
	Next
#>
			' Table & Column Mappings
			Me.ToTable("<#= _t.name #>")
<#
	For Each c in _t.columns
		If c.name <> c.alias Then
#>
			Me.[Property](Function(t) t.<#= c.alias #>).HasColumnName("<#= c.name #>")
<#
		End If
	Next
#>

			' Relationships
<#

	For Each r in _t.relations
		If r.isOptional Then
#>
			Me.HasisOptional(Function(t) t.<#= r.toTable.name #>).WithMany(Function(t) t.<#= r.alias #>).HasForeignKey(Function(d) d.<#= r.toColumn.name #>)
<#      Else #>
			Me.HasRequired(Function(t) t.<#= r.toTable.name #>).WithMany(Function(t) t.<#= r.alias #>).HasForeignKey(Function(d) d.<#= r.toColumn.name #>)
<#
		End If
	Next
#>

		End Sub
	End Class
End Namespace